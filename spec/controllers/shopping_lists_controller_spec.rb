require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ShoppingListsController, type: :controller do

  let(:user) {FactoryGirl.create(:user)}
  
  # This should return the minimal set of attributes required to create a valid
  # ShoppingList. As you add validations to ShoppingList, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: 'Whole Foods' }
  }

  let(:invalid_attributes) {
    { name: '' }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ShoppingListsController. Be sure to keep this updated too.
  let(:valid_session) { {} }
  
  before do
    sign_in user
    @shopping_list = user.shopping_lists.create! valid_attributes
    @shopping_lists = user.shopping_lists
  end

  describe "GET #index" do
    it "assigns all shopping_lists as @shopping_lists" do      
      get :index, params: {}
      expect(assigns(:shopping_lists)).to match_array(@shopping_lists)
    end
  end

  describe "GET #show" do
    it "assigns the requested shopping_list as @shopping_list" do
      get :show, params: {id: @shopping_list.to_param}
      expect(assigns(:shopping_list)).to eq(@shopping_list)
    end
  end

  describe "GET #new" do
    it "assigns a new shopping_list as @shopping_list" do
      get :new, params: {}
      expect(assigns(:shopping_list)).to be_a_new(ShoppingList)
    end
  end

  describe "GET #edit" do
    it "assigns the requested shopping_list as @shopping_list" do
      get :edit, params: {id: @shopping_list.to_param}
      expect(assigns(:shopping_list)).to eq(@shopping_list)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new ShoppingList" do
        expect {
          post :create, params: {shopping_list: valid_attributes}, session: valid_session
        }.to change(ShoppingList, :count).by(1)
      end

      it "assigns a newly created shopping_list as @shopping_list" do
        post :create, params: {shopping_list: valid_attributes}, session: valid_session
        expect(assigns(:shopping_list)).to be_a(ShoppingList)
        expect(assigns(:shopping_list)).to be_persisted
      end

      it "redirects to the shopping_list index" do
        post :create, params: {shopping_list: valid_attributes}, session: valid_session
        expect(response).to redirect_to(shopping_lists_path)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved shopping_list as @shopping_list" do
        post :create, params: {shopping_list: invalid_attributes}, session: valid_session
        expect(assigns(:shopping_list)).to be_a_new(ShoppingList)
      end

      it "re-renders the 'new' template" do
        post :create, params: {shopping_list: invalid_attributes}, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        { name: 'New Seasons' }
      }

      it "updates the requested shopping_list" do
        put :update, params: {id: @shopping_list.to_param, shopping_list: new_attributes}, session: valid_session
        @shopping_list.reload
        expect(@shopping_list.name).to eq 'New Seasons'
      end

      it "assigns the requested shopping_list as @shopping_list" do
        put :update, params: {id: @shopping_list.to_param, shopping_list: new_attributes}, session: valid_session
        expect(assigns(:shopping_list)).to eq(@shopping_list)
      end

      it "redirects to the shopping_list index" do
        put :update, params: {id: @shopping_list.to_param, shopping_list: new_attributes}, session: valid_session
        expect(response).to redirect_to(shopping_lists_path)
      end
    end

    context "with invalid params" do
      it "assigns the shopping_list as @shopping_list" do
        put :update, params: {id: @shopping_list.to_param, shopping_list: invalid_attributes}, session: valid_session
        expect(assigns(:shopping_list)).to eq(@shopping_list)
      end

      it "re-renders the 'edit' template" do
        put :update, params: {id: @shopping_list.to_param, shopping_list: invalid_attributes}, session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested shopping_list" do
      expect {
        delete :destroy, params: {id: @shopping_list.to_param}, session: valid_session
      }.to change(ShoppingList, :count).by(-1)
    end

    it "redirects to the shopping_lists list" do
      delete :destroy, params: {id: @shopping_list.to_param}, session: valid_session
      expect(response).to redirect_to(shopping_lists_path)
    end
  end

end
